"""
Gaussian likelihood : ``p(y|f) = ùìù(y|f,œµ) ``
"""
struct GaussianLikelihood{T<:Real} <: RegressionLikelihood{T}
    œµ::AbstractVector{T}
    function GaussianLikelihood{T}(œµ::Real) where {T<:Real}
        new{T}([œµ])
    end
    function GaussianLikelihood{T}(œµ::AbstractVector) where {T<:Real}
        new{T}(œµ)
    end
end

function GaussianLikelihood(œµ::T=1e-3) where {T<:Real}
    GaussianLikelihood{T}(œµ)
end

function GaussianLikelihood(œµ::AbstractVector{T}) where {T<:Real}
    GaussianLikelihood{T}(œµ)
end

function pdf(l::GaussianLikelihood,y::Real,f::Real)
    pdf(Normal(y,l.œµ[1]),f)
end

function logpdf(l::GaussianLikelihood,y::Real,f::Real)
    logpdf(Normal(y,l.œµ[1]),f)
end

function Base.show(io::IO,model::GaussianLikelihood{T}) where T
    print(io,"Gaussian likelihood")
end


function init_likelihood(likelihood::GaussianLikelihood{T},nLatent::Integer,nSamples::Integer) where {T<:Real}
    if length(likelihood.œµ) ==1 && length(likelihood.œµ) != nLatent
        return GaussianLikelihood{T}([likelihood.œµ[1] for _ in 1:nLatent])
    elseif length(likelihood.œµ) != nLatent
        @warn "Wrong dimension of œµ : $(length(likelihood.œµ)), using first value only"
        return GaussianLikelihood{T}([likelihood.œµ[1] for _ in 1:nLatent])
    else
        return likelihood
    end
end

function local_updates!(model::VGP{GaussianLikelihood{T}}) where {T<:Real}
end

function local_updates!(model::SVGP{GaussianLikelihood{T}}) where {T<:Real}
    model.likelihood.œµ .= 1.0/model.inference.nSamplesUsed *broadcast((y,Œ∫,Œº,Œ£,KÃÉ)->dot(y[model.inference.MBIndices],Œ∫*Œº)+opt_trace(Œ∫*Œ£,Œ∫)+sum(KÃÉ),model.y,model.Œ∫,model.Œº,model.Œ£,model.KÃÉ)
    # (dot.(getindex.(model.y,[model.inference.MBIndices]),model.Œ∫.*model.Œº) + opt_trace.(model.Œ∫'.*model.Œ∫,model.Œ£) + sum.(model.KÃÉ))
end

""" Return the gradient of the expectation for latent GP `index` """
function expec_Œº(model::SVGP{GaussianLikelihood{T},AnalyticInference{T}},index::Integer) where {T<:Real}
    return model.y[index][model.inference.MBIndices]./model.likelihood.œµ[index]
end

function ‚àáŒº(model::SVGP{GaussianLikelihood{T},AnalyticInference{T}}) where {T<:Real}
    return getindex.(model.y,[model.inference.MBIndices])./model.likelihood.œµ
end

function expec_Œ£(model::SVGP{GaussianLikelihood{T},AnalyticInference{T}},index::Integer) where {T<:Real}
    return 0.5/model.likelihood.œµ[index]*ones(model.inference.nSamplesUsed)
end

function ‚àáŒ£(model::SVGP{GaussianLikelihood{T},AnalyticInference{T}}) where {T<:Real}
    return [0.5/model.likelihood.œµ[i]*ones(model.inference.nSamplesUsed) for i in 1:model.nLatent]
end

function natural_gradient!(model::VGP{GaussianLikelihood{T},AnalyticInference{T}}) where {T<:Real}
end

function global_update!(model::VGP{GaussianLikelihood{T},AnalyticInference{T}}) where {T<:Real}
    if model.inference.nIter <= 1
        model.Œº .= model.y
        model.Œ£ .= inv.(model.Knn.+model.likelihood.œµ.*[I])
    end
end

function proba_y(model::Union{VGP{GaussianLikelihood{T},AnalyticInference{T}},SVGP{GaussianLikelihood{T},AnalyticInference{T}}},X_test::AbstractMatrix{T}) where {T<:Real}
    Œºf, œÉ¬≤f = predict_f(model,X_test,covf=true)
    if model.nLatent == 1
        return Œºf,œÉ¬≤f.+model.likelihood.œµ[1]
    else
        œÉ¬≤f .+= [ones(size(X_test,1))].*model.likelihood.œµ
        return Œºf,œÉ¬≤f
    end
end

### Special case where the ELBO is equal to the marginal likelihood
function ELBO(model::VGP{GaussianLikelihood{T}}) where {T<:Real}
    return -0.5*sum(broadcast((y,K,œµ)->dot(y,inv(K+œµ*I)*y)            + logdet(K+œµ*I)+ model.nFeature*log(twoœÄ),model.y,model.Knn,model.likelihood.œµ))
end

function ELBO(model::SVGP{GaussianLikelihood{T}}) where {T<:Real}
    return expecLogLikelihood(model) - GaussianKL(model)
end

function expecLogLikelihood(model::SVGP{GaussianLikelihood{T}}) where T
    # return -0.5*model.inference.œÅ*(model.inference.nSamplesUsed*sum(log.(twoœÄ.*model.likelihood.œµ)) +
                # sum((broadcast(x->dot(x,x),getindex.(model.y,[model.inference.MBIndices]).-model.Œ∫.*model.Œº) .+
                # sum.(model.KÃÉ)+opt_trace.(model.Œ∫.*model.Œ£,model.Œ∫))./model.likelihood.œµ))
    return -0.5*model.inference.œÅ*sum(broadcast((y,œµ,Œ∫,Œ£,Œº,KÃÉ)->1.0/œµ*(sum(abs2.(y[model.inference.MBIndices]-Œ∫*Œº))+sum(KÃÉ)+opt_trace(Œ∫*Œ£,Œ∫))+model.inference.nSamplesUsed*(log(twoœÄ)+log(œµ)),model.y,model.likelihood.œµ,model.\Œ∫,model.Œ£,model.Œº,model.KÃÉ))
end

function hyperparameter_gradient_function(model::VGP{GaussianLikelihood{T}}) where {T<:Real}
    model.Œ£ .= broadcast((invK,œµ)->Symmetric(inv(invK +œµ*I)),model.invKnn,model.likelihood.œµ)
    A = (model.Œ£.*(model.¬µ.*transpose.(model.Œº)).-[I]).*model.Œ£
    if model.IndependentPriors
        return (function(Jnn,index)
                    return 0.5*opt_trace(Jnn,A[index])
                end,
                function(kernel,index)
                    return 0.5/getvariance(kernel)*opt_trace(model.Knn[index],A[index])
                end)
    else
        return (function(Jnn,index)
            return 0.5*sum(opt_trace.(Jnn.*transpose(A[i])) for i in 1:model.nLatent)
                end,
                function(kernel,index)
                    return 0.5/getvariance(kernel)*sum(sum(model.Knn[1].*transpose(A[i])) for i in 1:model.nLatent)
                end)
    end
end
