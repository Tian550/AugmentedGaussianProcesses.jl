"""Compute the KL Divergence between the GP Prior and the variational distribution for the variational full batch model"""
function GaussianKL(model::VGP)
    return 0.5*sum(opt_trace.(model.invKnn,model.Œ£+(model.Œº.-model.Œº‚ÇÄ).*transpose.(model.Œº.-model.Œº‚ÇÄ)).-model.nSample.-logdet.(model.Œ£).-logdet.(model.invKnn))
end

"""Compute the KL Divergence between the Sparse GP Prior and the variational distribution for the sparse variational model"""
function GaussianKL(model::SVGP)
    return 0.5*sum(opt_trace.(model.invKmm,model.Œ£+(model.Œº.-model.Œº‚ÇÄ).*transpose.(model.Œº.-model.Œº‚ÇÄ)).-model.nFeature.-logdet.(model.Œ£).-logdet.(model.invKmm))
end


""" Compute the equivalent of KL divergence between an improper prior and a variational Gamma distribution"""
function GammaImproperKL(model::AbstractGP)
    return model.inference.œÅ*sum(-model.likelihood.Œ±.+log(model.likelihood.Œ≤[1]).-lgamma.(model.likelihood.Œ±).-(1.0.-model.likelihood.Œ±).*digamma.(model.likelihood.Œ±))
end

"""Compute KL divergence for Inverse-Gamma variables"""
function InverseGammaKL(model::AbstractGP{<:StudentTLikelihood})
    Œ±_p = model.likelihood.ŒΩ/2; Œ≤_p= Œ±_p*model.likelihood.œÉ
    return sum(broadcast(Œ≤->(Œ±_p-model.likelihood.Œ±)*digamma(Œ±_p)-log(gamma(Œ±_p))+log(gamma(model.likelihood.Œ±))
            + model.likelihood.Œ±*sum(log(Œ≤_p).-log.(Œ≤))+Œ±_p*sum(Œ≤.-Œ≤_p)/Œ≤_p,model.likelihood.œâ))
end

"""KL(q(œâ)||p(œâ)), where q(œâ) = Po(Œ≥) and p(œâ) = Po(Œª)"""
function PoissonKL(Œ≥,Œª;œÅ::Real=1.0)
    œÅ = sum(broadcast((Œ≥,Œª)->sum(Œª)-sum(Œ≥)+dot(Œ≥,log.(Œ≥))-dot(Œ≥,log.(Œª)),Œ≥,Œª))
end

function PoissonKL(model::AbstractGP{<:PoissonLikelihood})
    PoissonKL(model.likelihood.Œ≥,fill.(model.likelihood.Œª,size(model.likelihood.Œ≥[1])),œÅ=model.inference.œÅ)
end

"""Compute KL divergence for Poisson variables in the multi-class setting"""
function PoissonKL(model::AbstractGP{<:LogisticSoftMaxLikelihood})
    return model.inference.œÅ*sum(Œ≥->sum(xlogx.(Œ≥).+Œ≥.*(-1.0.-digamma.(model.likelihood.Œ±).+log.(model.likelihood.Œ≤))+model.likelihood.Œ±./model.likelihood.Œ≤),model.likelihood.Œ≥)
end



"""KL(q(œâ)||p(œâ)), where q(œâ) = PG(b,c) and p(œâ) = PG(b,0). Œ∏ = ùë¨[œâ]"""
function PolyaGammaKL(b,c,Œ∏;œÅ::Real=1.0)
    return œÅ*sum(broadcast((b,c,Œ∏)->-0.5*dot(c.^2,Œ∏)-0.5*dot(b,logcosh.(0.5*c)),b,c,Œ∏))
end

"""Compute KL divergence for Polya-Gamma variables in the binary setting"""
function PolyaGammaKL(model::AbstractGP{<:LogisticLikelihood})
    return PolyaGammaKL([ones(length(model.likelihood.c[1]))],model.likelihood.c,model.likelihood.Œ∏,œÅ=model.inference.œÅ)
end

"""Compute KL divergence for Polya-Gamma variables in the binary setting"""
function PolyaGammaKL(model::VGP{<:PoissonLikelihood})
    return PolyaGammaKL(model.y.+model.likelihood.Œ≥,model.likelihood.c,model.likelihood.Œ∏,œÅ=model.inference.œÅ)
end

"""Compute KL divergence for Polya-Gamma variables in the binary setting"""
function PolyaGammaKL(model::SVGP{<:PoissonLikelihood})
    return PolyaGammaKL(getindex.(model.y,[model.inference.MBIndices]).+model.likelihood.Œ≥,model.likelihood.c,model.likelihood.Œ∏,œÅ=model.inference.œÅ)
end

"""Compute KL divergence for Polya-Gamma variables in the multi-class setting"""
function PolyaGammaKL(model::VGP{<:LogisticSoftMaxLikelihood})
    return PolyaGammaKL(model.likelihood.Y.+model.likelihood.Œ≥,model.likelihood.c,model.likelihood.Œ∏)
end

"""Compute KL divergence for Polya-Gamma variables in the sparse multi-class setting"""
function PolyaGammaKL(model::SVGP{<:LogisticSoftMaxLikelihood})
    return PolyaGammaKL(getindex.(model.likelihood.Y,[model.inference.MBIndices]).+model.likelihood.Œ≥,model.likelihood.c,model.likelihood.Œ∏,œÅ=model.inference.œÅ)
end

"""Compute Entropy for Generalized inverse Gaussian latent variables (BayesianSVM)"""
function GIGEntropy(model::AbstractGP{<:BayesianSVM})
    return model.inference.œÅ*sum(broadcast(b->0.5*sum(b)+sum(log.(2.0*besselk.(0.5,sqrt.(b))))-0.5*sum(sqrt.(b)),model.likelihood.œâ))
end

function GIGEntropy(model::AbstractGP{<:LaplaceLikelihood})
end
